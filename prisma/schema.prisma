// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql" or "sqlite"
  url      = env("DATABASE_URL") // Use environment variable for the database URL
}

// Companies Table
model Company {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  logo        String?

  address     String
  city        String
  province    String
  postal_code String
  country     String
  phone       String?
  email       String?
  website     String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  user User[]

  @@map("companies")
}

// Users Table
model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Foreign Keys
  role_id Int
  company_id Int?

  // Relationships
  role Role @relation(fields: [role_id], references: [id])
  company Company? @relation(fields: [company_id],references: [id])
  profile Profile? 

  @@map("users")
}

// Profiles Table
model Profile {
  id Int @id @default(autoincrement())
  user_id Int  @unique

  user User @relation(references: [id], fields: [user_id])

  @@map("profiles")
}

// Roles Table
model Role {
  id         Int      @id @default(autoincrement())
  name       String
  is_global  Boolean  @default(false) // True for Super Admin
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Foreign Key (optional, for company-specific roles)
  company_id Int?

  // Relationships
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

// Permissions Table
model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relationships
  roles RolePermission[]

  @@map("permissions")
}

// Role-Permissions Join Table (Many-to-Many)
model RolePermission {
  role_id       Int
  permission_id Int

  // Relationships
  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
  @@map("role_permissions")
}

model Menu {
  id        Int    @id @default(autoincrement())
  type      String //parent, children, group
  label     String // Menu Name
  path      String // Menu route
  parent_id Int?

  parent   Menu?  @relation("MultiMenu", references: [id], fields: [parent_id])
  children Menu[] @relation("MultiMenu")

  @@map("menus")
}
